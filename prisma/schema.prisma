generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  role      String   @default("CUSTOMER") // Can be "CUSTOMER", "ADMIN", etc.
  clerkId   String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  carts     Cart[] // Relation to Cart
  orders    Order[] // Relation to Order

  @@map("users") // Specifies the table name in PostgreSQL
}

// Product model
model Product {
  id          String      @id @default(cuid())
  name        String
  description String
  images      String[] // Array of image URLs
  price       Float
  stock       Int // Current stock count
  ratings     Float       @default(0) // Average rating
  category    String
  attributes  Json // Key-value pair for attributes like size, color, etc.
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cartItems   CartItem[] // Relation to CartItem
  orderItems  OrderItem[] // Relation to OrderItem

  @@map("products")
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [clerkId])
  cartItems CartItem[] // Relation to CartItem
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

// CartItem model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_items")
}

// Order model
model Order {
  id         String      @id @default(cuid())
  userId     String // Reference to clerkId instead of id
  user       User        @relation(fields: [userId], references: [clerkId]) // Use clerkId as the reference
  orderItems OrderItem[] // Relation to OrderItem
  status     OrderStatus @default(PENDING) // Enum for order status
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@map("orders")
}

// OrderItem model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float // Price at the time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

// Enum for order status
enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}
